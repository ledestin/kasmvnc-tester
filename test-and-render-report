#!/usr/bin/python3

def disable_menu_animation():
  driver.execute_script("""
    document.querySelectorAll('*').forEach(function(element) {
        element.style.transition = 'none';
        element.style.animationDuration = '0s';
        element.style.animationDelay = '-1ms';
    });
  """)

def report_test_success(message, screenshot=None):
  data = {'testname': report_test_name, 'status': 'pass', 'errorout': message,
          'screenshot': screenshot}

  report_tests.append(data)

def progress_test_success():
  print(f'{progress_test_name} - complete')

def report_test_fail(message):
  report_tests.append({'testname': report_test_name, 'status': 'fail',
                       'errorout': message})
  report_status = 'FAIL'

def progress_test_fail(message=None):
  if (message):
    print(f'{progress_test_name} - error ({message})')
  else:
    print(f'{progress_test_name} - error')

  traceback.print_exc()

def focus_body_to_copy_clipboard():
  keep_body_focused_for_clipboard_copy_to_work()

def keep_body_focused_for_clipboard_copy_to_work():
  body_element = driver.find_element(By.TAG_NAME, 'body')
  body_element.click()

def set_container_clipboard(text):
  set_clipboard_cmd = f"/bin/bash -c 'echo {text} | xclip -sel clip'"
  test_container.exec_run(set_clipboard_cmd)

def read_container_clipboard():
  read_clipboard_cmd = f"/bin/bash -c 'xclip -o -sel clip'"

  exec_result = test_container.exec_run(read_clipboard_cmd, demux=True)
  exit_code = exec_result.exit_code
  output = b""
  if exec_result.output:
      if exec_result.output[0]:
        output += exec_result.output[0]
      if exec_result.output[1]:
        output += exec_result.output[1]

  return output.decode()

def paste_into_container_clipboard():
  body_element = driver.find_element(By.TAG_NAME, 'body')
  body_element.send_keys(Keys.CONTROL, 'v')

def paste_special_to_container():
  """Simulates Ctrl+Shift+V in the given element."""
  try:
    element = driver.find_element(By.TAG_NAME, 'body')

    actions = ActionChains(driver)
    actions.move_to_element(element).click()
    actions.key_down(Keys.CONTROL, element)
    actions.key_down(Keys.SHIFT, element)
    actions.send_keys('v')
    actions.key_up(Keys.SHIFT, element)
    actions.key_up(Keys.CONTROL, element)
    actions.perform()
  except Exception as e:
    print(f"Error emulating Ctrl+Shift+V: {e}")

def set_host_clipboard(text):
  set_clipboard = subprocess.Popen(f'/bin/bash -c "echo -n {text} | xsel -i --clipboard"',
                   shell=True, stdout=subprocess.PIPE)
  set_clipboard.communicate()

def read_host_clipboard():
  print_clipboard = subprocess.Popen('xsel --clipboard', shell=True,
                                     stdout=subprocess.PIPE)
  clipboard = print_clipboard.communicate()[0].decode("utf-8").replace('\n','')
  return clipboard

def spawn_terminal_in_container():
  test_container.exec_run('xfce4-terminal', demux=True, detach=True)

def kill_terminal_in_container():
  test_container.exec_run('pkill xfce4-terminal')

def enable_clipboard_read_write():
  driver.set_permissions('clipboard-read', 'granted')
  driver.set_permissions('clipboard-write', 'granted')

def test_seamless_clipboard_copy_from_host():
  global report_test_name
  global progress_test_name
  report_test_name = 'Chrome Clipboard API copy from host'
  progress_test_name = 'clipboard api (copy from host)'

  try:
    enable_clipboard_read_write()

    text_from_host = 'text from host'
    set_host_clipboard(text_from_host)
    focus_body_to_copy_clipboard()

    spawn_terminal_in_container()

    paste_special_to_container()
    grab_screenshot('terminal.png')

    clipboard = read_container_clipboard()
    if clipboard == text_from_host:
      report_test_success('Clipboard API string match',
        screenshot='terminal.png')
      progress_test_success()
    else:
      report_test_fail(f'Clipboard API string bad not "{text_from_host}": ' + clipboard)
      progress_test_fail()
  except Exception as error:
    report_test_fail(error)
    progress_test_fail(error)
  finally:
    kill_terminal_in_container()

def test_seamless_clipboard_copy_from_container():
  global report_test_name
  global progress_test_name
  report_test_name = 'Chrome Clipboard API copy from container'
  progress_test_name = 'clipboard api (copy from container)'

  try:
    enable_clipboard_read_write()
    keep_body_focused_for_clipboard_copy_to_work()

    text_from_container = 'text from container'
    set_container_clipboard(text_from_container)
    clipboard = read_host_clipboard()

    # Dump the clipboard from the running selenium X session
    if clipboard == text_from_container:
      report_test_success('Clipboard API string match')
      progress_test_success()
    else:
      report_test_fail(f'Clipboard API string bad not "{text_from_container}": {clipboard}')
      progress_test_fail()
  except Exception as error:
    report_test_fail(error)
    progress_test_fail(error)

def grab_screenshot(screenshot_filename):
  driver.save_screenshot(f"{outdir}/{screenshot_filename}")

def detect_test_image():
  if os.environ.get('TEST_IMAGE') is not None:
    return os.environ['TEST_IMAGE']

  return "kasmweb/ubuntu-jammy-desktop-with-updated-kasmvnc:develop"

def find_container_for_image(image):
  for container in docker_client.containers.list():
    if container.attrs['Config']['Image'] == image:
        return container

def test_window_resize():
  global report_test_name
  global progress_test_name
  report_test_name = 'Window resize'
  progress_test_name = 'resize'

  try:
    driver.set_window_size(800, 800)
    new_size = driver.get_window_size()
    if (new_size['width'] == 800 and new_size['height'] == 800):
      grab_screenshot("resize.png")

      report_test_success('Resize successful', screenshot="resize.png")
      progress_test_success()
    else:
      report_test_fail('Window resize failure')
      progress_test_fail()
  except Exception as error:
    report_test_fail(error)
    progress_test_fail(error)

def benchmark_test_ufo():
  global report_test_name
  global progress_test_name
  report_test_name = 'TestUFO benchmark'
  progress_test_name = 'test ufo'

  try:
    driver.find_element(By.ID, "noVNC_settings_button").click()
    grab_screenshot("menu1.png")
    driver.find_element(By.CSS_SELECTOR, "#noVNC_setting_enable_perf_stats + span").click()
    grab_screenshot("menu2.png")

    progress_test_success()
  except Exception as error:
      report_test_fail(error)
      progress_test_fail(error)

def test_xfce_running(container):
  global report_test_name
  global progress_test_name
  report_test_name = 'XFCE Running'
  progress_test_name = 'xfce'

  try:
    check_xfce_cmd = '/bin/bash -c "pgrep xfce4-session"'
    xfce = container.exec_run(check_xfce_cmd)
    if xfce[0] == 0:
      pids = xfce[1].decode("utf-8")
      grab_screenshot("xfce.png")

      report_test_success('XFCE is running pid ' + pids, screenshot="xfce.png")
      progress_test_success()
    else:
      report_test_fail('XFCE is not running')
      progress_test_fail()
  except Exception as error:
      report_test_fail(error)
      progress_test_fail(error)

def render_report():
  with open('index.template.html') as file_:
    template = Template(file_.read())

  html = template.render(
    image_name=TEST_IMAGE,
    report_tests=report_tests,
    report_status=report_status)

  with open(f"{outdir}/index.html", 'w') as f:
    f.write(html)

import os
import subprocess
import time
from jinja2 import Template

from xvfbwrapper import Xvfb

with Xvfb() as xvfb:
  from selenium.webdriver.common.by import By
  from selenium.webdriver.common.keys import Keys
  from selenium.webdriver import ActionChains
  from selenium_utils import driver

  global report_status
  global report_tests
  global report_test_name
  global progress_test_name

  global docker_client
  global test_container
  report_tests = []
  report_status = 'PASS'

  global outdir
  outdir = 'output'

  global TEST_IMAGE
  TEST_IMAGE = detect_test_image()

  import docker
  docker_client = docker.from_env()

  test_container = find_container_for_image(TEST_IMAGE)
  disable_menu_animation()
  test_xfce_running(test_container)
  test_seamless_clipboard_copy_from_host()
  test_seamless_clipboard_copy_from_container()
  test_window_resize()

  os.makedirs(outdir, exist_ok=True)
  render_report()

  if (report_status == 'FAIL'):
    sys.exit(1)
