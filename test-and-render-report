#!/usr/bin/python3

def keep_body_focused_for_clipboard_copy_to_work():
  body_element = driver.find_element(By.TAG_NAME, 'body')
  body_element.click()

def set_container_clipboard(text):
  set_clipboard_cmd = f"/bin/bash -c 'echo {text} | xclip -sel clip'"
  test_container.exec_run(set_clipboard_cmd)

def read_host_clipboard():
    print_clipboard = subprocess.Popen('xsel --display :1.0 --clipboard',shell=True,stdout=subprocess.PIPE)
    clipboard = print_clipboard.communicate()[0].decode("utf-8").replace('\n','')
    return clipboard

def test_clipboard():
  driver.set_permissions('clipboard-read', 'granted')
  driver.set_permissions('clipboard-write', 'granted')

  try:
    keep_body_focused_for_clipboard_copy_to_work()
    set_container_clipboard('clipboard-test')
    clipboard = read_host_clipboard()

    # Dump the clipboard from the running selenium X session
    if clipboard == 'clipboard-test':
      report_tests.append({'testname':'Chrome Clipboard API','status':'pass','errorout': 'Clipboard API string match'})
      print('clipboard api - complete')
    else:
      report_tests.append({'testname':'Chrome Clipboard API','status':'fail','errorout': 'Clipboard API string bad not "clipboard-test" : ' + clipboard})
      report_status = 'FAIL'
      print('clipboard api - error')
  except Exception as error:
    report_tests.append({'testname':'Chrome Clipboard API','status':'fail','errorout': error})
    report_status = 'FAIL'
    print('clipboard api - error', error)


def grab_screenshot(screenshot_filename):
  driver.save_screenshot(f"{outdir}/{screenshot_filename}")

def detect_test_image():
  if os.environ.get('TEST_IMAGE') is not None:
    return os.environ['TEST_IMAGE']

  return "kasmweb/ubuntu-jammy-desktop:develop"

def find_container_for_image(image):
  for container in docker_client.containers.list():
    if container.attrs['Config']['Image'] == image:
        return container

def test_resizing():
  try:
    driver.set_window_size(800, 800)
    grab_screenshot("resize.png")
    report_tests.append({'testname':'Window resize','status':'pass', 'screenshot': "resize.png"})
    print('resize - complete')
  except Exception as error:
    report_tests.append({'testname':'Window resize','status':'fail','errorout': error})
    report_status = 'FAIL'
    print('resize - error:', error)

def check_xfce_running(container):
  try:
    check_xfce_cmd = '/bin/bash -c "pgrep xfce4-session"'
    xfce = container.exec_run(check_xfce_cmd)
    if xfce[0] == 0:
      pids = xfce[1].decode("utf-8")
      grab_screenshot("xfce.png")
      report_tests.append({'testname':'XFCE Running','status':'pass','errorout': 'XFCE is running pid ' + pids, 'screenshot': "xfce.png"})
      print('xfce - complete')
    else:
      report_tests.append({'testname':'XFCE Running','status':'fail','errorout': 'XFCE is not running'})
      report_status = 'FAIL'
      print('xfce - error')
  except Exception as error:
    report_tests.append({'testname':'XFCE Running','status':'fail','errorout': error})
    report_status = 'FAIL'
    print('xfce - error:', error)

def render_report():
  with open('index.template.html') as file_:
    template = Template(file_.read())

  html = template.render(
    image_name=TEST_IMAGE,
    report_tests=report_tests,
    report_status=report_status)

  with open(f"{outdir}/index.html", 'w') as f:
    f.write(html)

import os
import subprocess
from jinja2 import Template

from selenium.webdriver.common.by import By
from selenium_utils import driver

global report_status
global report_tests
global docker_client
global test_container
report_tests = []
report_status = 'PASS'

global outdir
outdir = 'output'

global TEST_IMAGE
TEST_IMAGE = detect_test_image()

import docker
docker_client = docker.from_env()

test_container = find_container_for_image(TEST_IMAGE)
check_xfce_running(test_container)
test_clipboard()
test_resizing()

os.makedirs(outdir, exist_ok=True)
render_report()
